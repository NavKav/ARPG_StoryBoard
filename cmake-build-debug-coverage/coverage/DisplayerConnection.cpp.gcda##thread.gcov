        -:    0:Source:C:/PROGRA~1/MINGW-~1/X86_64~1.0-P/mingw64/lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/thread
        -:    0:Graph:C:\Users\navid\CLionProjects\ProjectTT\cmake-build-debug-coverage\CMakeFiles\ProjectTT.dir\src\DisplayerConnection.cpp.gcno
        -:    0:Data:C:\Users\navid\CLionProjects\ProjectTT\cmake-build-debug-coverage\CMakeFiles\ProjectTT.dir\src\DisplayerConnection.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// <thread> -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2008-2018 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file include/thread
        -:   26: *  This is a Standard C++ Library header.
        -:   27: */
        -:   28:
        -:   29:#ifndef _GLIBCXX_THREAD
        -:   30:#define _GLIBCXX_THREAD 1
        -:   31:
        -:   32:#pragma GCC system_header
        -:   33:
        -:   34:#if __cplusplus < 201103L
        -:   35:# include <bits/c++0x_warning.h>
        -:   36:#else
        -:   37:
        -:   38:#include <chrono>
        -:   39:#include <memory>
        -:   40:#include <tuple>
        -:   41:#include <cerrno>
        -:   42:#include <bits/functexcept.h>
        -:   43:#include <bits/functional_hash.h>
        -:   44:#include <bits/invoke.h>
        -:   45:#include <bits/gthr.h>
        -:   46:
        -:   47:#if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)
        -:   48:
        -:   49:namespace std _GLIBCXX_VISIBILITY(default)
        -:   50:{
        -:   51:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   52:
        -:   53:  /**
        -:   54:   * @defgroup threads Threads
        -:   55:   * @ingroup concurrency
        -:   56:   *
        -:   57:   * Classes for thread support.
        -:   58:   * @{
        -:   59:   */
        -:   60:
        -:   61:  /// thread
        -:   62:  class thread
        -:   63:  {
        -:   64:  public:
        -:   65:    // Abstract base class for types that wrap arbitrary functors to be
        -:   66:    // invoked in the new thread of execution.
        -:   67:    struct _State
        -:   68:    {
        -:   69:      virtual ~_State();
        -:   70:      virtual void _M_run() = 0;
        -:   71:    };
        -:   72:    using _State_ptr = unique_ptr<_State>;
        -:   73:
        -:   74:    typedef __gthread_t			native_handle_type;
        -:   75:
        -:   76:    /// thread::id
        -:   77:    class id
        -:   78:    {
        -:   79:      native_handle_type	_M_thread;
        -:   80:
        -:   81:    public:
function _ZNSt6thread2idC1Ev called 0 returned 0% blocks executed 0%
    #####:   82:      id() noexcept : _M_thread() { }
        -:   83:
        -:   84:      explicit
        -:   85:      id(native_handle_type __id) : _M_thread(__id) { }
        -:   86:
        -:   87:    private:
        -:   88:      friend class thread;
        -:   89:      friend class hash<thread::id>;
        -:   90:
        -:   91:      friend bool
        -:   92:      operator==(thread::id __x, thread::id __y) noexcept;
        -:   93:
        -:   94:      friend bool
        -:   95:      operator<(thread::id __x, thread::id __y) noexcept;
        -:   96:
        -:   97:      template<class _CharT, class _Traits>
        -:   98:	friend basic_ostream<_CharT, _Traits>&
        -:   99:	operator<<(basic_ostream<_CharT, _Traits>& __out, thread::id __id);
        -:  100:    };
        -:  101:
        -:  102:  private:
        -:  103:    id				_M_id;
        -:  104:
        -:  105:  public:
function _ZNSt6threadC1Ev called 0 returned 0% blocks executed 0%
    #####:  106:    thread() noexcept = default;
    %%%%%:  106-block  0
call    0 never executed
        -:  107:    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  108:    // 2097.  packaged_task constructors should be constrained
        -:  109:    thread(thread&) = delete;
        -:  110:    thread(const thread&) = delete;
        -:  111:    thread(const thread&&) = delete;
        -:  112:
        -:  113:    thread(thread&& __t) noexcept
        -:  114:    { swap(__t); }
        -:  115:
        -:  116:    template<typename _Callable, typename... _Args>
        -:  117:      explicit
function _ZNSt6threadC1IM19DisplayerConnectionFvvEJPS1_EEEOT_DpOT0_ called 1 returned 100% blocks executed 75%
        1:  118:      thread(_Callable&& __f, _Args&&... __args)
        1:  119:      {
        1:  119-block  0
call    0 returned 1
        -:  120:#ifdef GTHR_ACTIVE_PROXY
        -:  121:	// Create a reference to pthread_create, not just the gthr weak symbol.
        -:  122:	auto __depend = reinterpret_cast<void(*)()>(&pthread_create);
        -:  123:#else
        1:  124:	auto __depend = nullptr;
        -:  125:#endif
        1:  126:        _M_start_thread(_S_make_state(
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  126-block  0
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  126-block  1
call    9 returned 1
    $$$$$:  126-block  2
call   10 never executed
    $$$$$:  126-block  3
        -:  127:	      __make_invoker(std::forward<_Callable>(__f),
        -:  128:			     std::forward<_Args>(__args)...)),
        -:  129:	    __depend);
        1:  130:      }
        -:  131:
function _ZNSt6threadD1Ev called 0 returned 0% blocks executed 0%
    #####:  132:    ~thread()
    #####:  133:    {
    #####:  134:      if (joinable())
    %%%%%:  134-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  135:	std::terminate();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:    }
        -:  137:
        -:  138:    thread& operator=(const thread&) = delete;
        -:  139:
function _ZNSt6threadaSEOS_ called 0 returned 0% blocks executed 0%
    #####:  140:    thread& operator=(thread&& __t) noexcept
        -:  141:    {
    #####:  142:      if (joinable())
    %%%%%:  142-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  143:	std::terminate();
    %%%%%:  143-block  0
call    0 never executed
    #####:  144:      swap(__t);
    %%%%%:  144-block  0
call    0 never executed
    #####:  145:      return *this;
        -:  146:    }
        -:  147:
        -:  148:    void
function _ZNSt6thread4swapERS_ called 0 returned 0% blocks executed 0%
    #####:  149:    swap(thread& __t) noexcept
    #####:  150:    { std::swap(_M_id, __t._M_id); }
    %%%%%:  150-block  0
call    0 never executed
        -:  151:
        -:  152:    bool
function _ZNKSt6thread8joinableEv called 0 returned 0% blocks executed 0%
    #####:  153:    joinable() const noexcept
    #####:  154:    { return !(_M_id == id()); }
    %%%%%:  154-block  0
call    0 never executed
call    1 never executed
        -:  155:
        -:  156:    void
        -:  157:    join();
        -:  158:
        -:  159:    void
        -:  160:    detach();
        -:  161:
        -:  162:    thread::id
        -:  163:    get_id() const noexcept
        -:  164:    { return _M_id; }
        -:  165:
        -:  166:    /** @pre thread is joinable
        -:  167:     */
        -:  168:    native_handle_type
        -:  169:    native_handle()
        -:  170:    { return _M_id._M_thread; }
        -:  171:
        -:  172:    // Returns a value that hints at the number of hardware thread contexts.
        -:  173:    static unsigned int
        -:  174:    hardware_concurrency() noexcept;
        -:  175:
        -:  176:  private:
        -:  177:    template<typename _Callable>
        -:  178:      struct _State_impl : public _State
        -:  179:      {
        -:  180:	_Callable		_M_func;
        -:  181:
function _ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJM19DisplayerConnectionFvvEPS3_EEEEEC1EOS8_ called 1 returned 100% blocks executed 100%
        1:  182:	_State_impl(_Callable&& __f) : _M_func(std::forward<_Callable>(__f))
        1:  182-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
        1:  183:	{ }
        -:  184:
        -:  185:	void
function _ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJM19DisplayerConnectionFvvEPS3_EEEEE6_M_runEv called 1 returned 100% blocks executed 100%
        1:  186:	_M_run() { _M_func(); }
        1:  186-block  0
call    0 returned 1
        -:  187:      };
        -:  188:
        -:  189:    void
        -:  190:    _M_start_thread(_State_ptr, void (*)());
        -:  191:
        -:  192:    template<typename _Callable>
        -:  193:      static _State_ptr
function _ZNSt6thread13_S_make_stateINS_8_InvokerISt5tupleIJM19DisplayerConnectionFvvEPS3_EEEEEESt10unique_ptrINS_6_StateESt14default_deleteISA_EEOT_ called 1 returned 100% blocks executed 100%
        1:  194:      _S_make_state(_Callable&& __f)
        -:  195:      {
        -:  196:	using _Impl = _State_impl<_Callable>;
        1:  197:	return _State_ptr{new _Impl{std::forward<_Callable>(__f)}};
        1:  197-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
        -:  198:      }
        -:  199:#if _GLIBCXX_THREAD_ABI_COMPAT
        -:  200:  public:
        -:  201:    struct _Impl_base;
        -:  202:    typedef shared_ptr<_Impl_base>	__shared_base_type;
        -:  203:    struct _Impl_base
        -:  204:    {
        -:  205:      __shared_base_type	_M_this_ptr;
        -:  206:      virtual ~_Impl_base() = default;
        -:  207:      virtual void _M_run() = 0;
        -:  208:    };
        -:  209:
        -:  210:  private:
        -:  211:    void
        -:  212:    _M_start_thread(__shared_base_type, void (*)());
        -:  213:
        -:  214:    void
        -:  215:    _M_start_thread(__shared_base_type);
        -:  216:#endif
        -:  217:
        -:  218:  private:
        -:  219:    // A call wrapper that does INVOKE(forwarded tuple elements...)
        -:  220:    template<typename _Tuple>
        -:  221:      struct _Invoker
        -:  222:      {
        -:  223:	_Tuple _M_t;
        -:  224:
        -:  225:	template<size_t _Index>
        -:  226:	  static __tuple_element_t<_Index, _Tuple>&&
        -:  227:	  _S_declval();
        -:  228:
        -:  229:	template<size_t... _Ind>
        -:  230:	  auto
function _ZNSt6thread8_InvokerISt5tupleIJM19DisplayerConnectionFvvEPS2_EEE9_M_invokeIJLy0ELy1EEEEDTcl8__invokespcl10_S_declvalIXT_EEEEESt12_Index_tupleIJXspT_EEE called 1 returned 100% blocks executed 100%
        1:  231:	  _M_invoke(_Index_tuple<_Ind...>)
        -:  232:	  noexcept(noexcept(std::__invoke(_S_declval<_Ind>()...)))
        -:  233:	  -> decltype(std::__invoke(_S_declval<_Ind>()...))
        1:  234:	  { return std::__invoke(std::get<_Ind>(std::move(_M_t))...); }
        1:  234-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
        -:  235:
        -:  236:	using _Indices
        -:  237:	  = typename _Build_index_tuple<tuple_size<_Tuple>::value>::__type;
        -:  238:
        -:  239:	auto
function _ZNSt6thread8_InvokerISt5tupleIJM19DisplayerConnectionFvvEPS2_EEEclEv called 1 returned 100% blocks executed 100%
        1:  240:	operator()()
        -:  241:	noexcept(noexcept(std::declval<_Invoker&>()._M_invoke(_Indices())))
        -:  242:	-> decltype(std::declval<_Invoker&>()._M_invoke(_Indices()))
        1:  243:	{ return _M_invoke(_Indices()); }
        1:  243-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  243-block  1
        1:  243-block  2
        -:  244:      };
        -:  245:
        -:  246:    template<typename... _Tp>
        -:  247:      using __decayed_tuple = tuple<typename std::decay<_Tp>::type...>;
        -:  248:
        -:  249:  public:
        -:  250:    // Returns a call wrapper that stores
        -:  251:    // tuple{DECAY_COPY(__callable), DECAY_COPY(__args)...}.
        -:  252:    template<typename _Callable, typename... _Args>
        -:  253:      static _Invoker<__decayed_tuple<_Callable, _Args...>>
function _ZNSt6thread14__make_invokerIM19DisplayerConnectionFvvEJPS1_EEENS_8_InvokerISt5tupleIJNSt5decayIT_E4typeEDpNS7_IT0_E4typeEEEEEOS8_DpOSB_ called 1 returned 100% blocks executed 100%
        1:  254:      __make_invoker(_Callable&& __callable, _Args&&... __args)
        -:  255:      {
        -:  256:	return { __decayed_tuple<_Callable, _Args...>{
        -:  257:	    std::forward<_Callable>(__callable), std::forward<_Args>(__args)...
        1:  258:	} };
        1:  258-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
        -:  259:      }
        -:  260:  };
        -:  261:
        -:  262:  inline void
        -:  263:  swap(thread& __x, thread& __y) noexcept
        -:  264:  { __x.swap(__y); }
        -:  265:
        -:  266:  inline bool
function _ZSteqNSt6thread2idES0_ called 0 returned 0% blocks executed 0%
    #####:  267:  operator==(thread::id __x, thread::id __y) noexcept
        -:  268:  {
        -:  269:    // pthread_equal is undefined if either thread ID is not valid, so we
        -:  270:    // can't safely use __gthread_equal on default-constructed values (nor
        -:  271:    // the non-zero value returned by this_thread::get_id() for
        -:  272:    // single-threaded programs using GNU libc). Assume EqualityComparable.
    #####:  273:    return __x._M_thread == __y._M_thread;
    %%%%%:  273-block  0
        -:  274:  }
        -:  275:
        -:  276:  inline bool
        -:  277:  operator!=(thread::id __x, thread::id __y) noexcept
        -:  278:  { return !(__x == __y); }
        -:  279:
        -:  280:  inline bool
        -:  281:  operator<(thread::id __x, thread::id __y) noexcept
        -:  282:  {
        -:  283:    // Pthreads doesn't define any way to do this, so we just have to
        -:  284:    // assume native_handle_type is LessThanComparable.
        -:  285:    return __x._M_thread < __y._M_thread;
        -:  286:  }
        -:  287:
        -:  288:  inline bool
        -:  289:  operator<=(thread::id __x, thread::id __y) noexcept
        -:  290:  { return !(__y < __x); }
        -:  291:
        -:  292:  inline bool
        -:  293:  operator>(thread::id __x, thread::id __y) noexcept
        -:  294:  { return __y < __x; }
        -:  295:
        -:  296:  inline bool
        -:  297:  operator>=(thread::id __x, thread::id __y) noexcept
        -:  298:  { return !(__x < __y); }
        -:  299:
        -:  300:  // DR 889.
        -:  301:  /// std::hash specialization for thread::id.
        -:  302:  template<>
        -:  303:    struct hash<thread::id>
        -:  304:    : public __hash_base<size_t, thread::id>
        -:  305:    {
        -:  306:      size_t
        -:  307:      operator()(const thread::id& __id) const noexcept
        -:  308:      { return std::_Hash_impl::hash(__id._M_thread); }
        -:  309:    };
        -:  310:
        -:  311:  template<class _CharT, class _Traits>
        -:  312:    inline basic_ostream<_CharT, _Traits>&
        -:  313:    operator<<(basic_ostream<_CharT, _Traits>& __out, thread::id __id)
        -:  314:    {
        -:  315:      if (__id == thread::id())
        -:  316:	return __out << "thread::id of a non-executing thread";
        -:  317:      else
        -:  318:	return __out << __id._M_thread;
        -:  319:    }
        -:  320:
        -:  321:  /** @namespace std::this_thread
        -:  322:   *  @brief ISO C++ 2011 entities sub-namespace for thread.
        -:  323:   *  30.3.2 Namespace this_thread.
        -:  324:   */
        -:  325:  namespace this_thread
        -:  326:  {
        -:  327:    /// get_id
        -:  328:    inline thread::id
        -:  329:    get_id() noexcept
        -:  330:    {
        -:  331:#ifdef __GLIBC__
        -:  332:      // For the GNU C library pthread_self() is usable without linking to
        -:  333:      // libpthread.so but returns 0, so we cannot use it in single-threaded
        -:  334:      // programs, because this_thread::get_id() != thread::id{} must be true.
        -:  335:      // We know that pthread_t is an integral type in the GNU C library.
        -:  336:      if (!__gthread_active_p())
        -:  337:	return thread::id(1);
        -:  338:#endif
        -:  339:      return thread::id(__gthread_self());
        -:  340:    }
        -:  341:
        -:  342:    /// yield
        -:  343:    inline void
        -:  344:    yield() noexcept
        -:  345:    {
        -:  346:#ifdef _GLIBCXX_USE_SCHED_YIELD
        -:  347:      __gthread_yield();
        -:  348:#endif
        -:  349:    }
        -:  350:
        -:  351:    void
        -:  352:    __sleep_for(chrono::seconds, chrono::nanoseconds);
        -:  353:
        -:  354:    /// sleep_for
        -:  355:    template<typename _Rep, typename _Period>
        -:  356:      inline void
        -:  357:      sleep_for(const chrono::duration<_Rep, _Period>& __rtime)
        -:  358:      {
        -:  359:	if (__rtime <= __rtime.zero())
        -:  360:	  return;
        -:  361:	auto __s = chrono::duration_cast<chrono::seconds>(__rtime);
        -:  362:	auto __ns = chrono::duration_cast<chrono::nanoseconds>(__rtime - __s);
        -:  363:#ifdef _GLIBCXX_USE_NANOSLEEP
        -:  364:	__gthread_time_t __ts =
        -:  365:	  {
        -:  366:	    static_cast<std::time_t>(__s.count()),
        -:  367:	    static_cast<long>(__ns.count())
        -:  368:	  };
        -:  369:	while (::nanosleep(&__ts, &__ts) == -1 && errno == EINTR)
        -:  370:	  { }
        -:  371:#else
        -:  372:	__sleep_for(__s, __ns);
        -:  373:#endif
        -:  374:      }
        -:  375:
        -:  376:    /// sleep_until
        -:  377:    template<typename _Clock, typename _Duration>
        -:  378:      inline void
        -:  379:      sleep_until(const chrono::time_point<_Clock, _Duration>& __atime)
        -:  380:      {
        -:  381:	auto __now = _Clock::now();
        -:  382:	if (_Clock::is_steady)
        -:  383:	  {
        -:  384:	    if (__now < __atime)
        -:  385:	      sleep_for(__atime - __now);
        -:  386:	    return;
        -:  387:	  }
        -:  388:	while (__now < __atime)
        -:  389:	  {
        -:  390:	    sleep_for(__atime - __now);
        -:  391:	    __now = _Clock::now();
        -:  392:	  }
        -:  393:      }
        -:  394:  }
        -:  395:
        -:  396:  // @} group threads
        -:  397:
        -:  398:_GLIBCXX_END_NAMESPACE_VERSION
        -:  399:} // namespace
        -:  400:
        -:  401:#endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1
        -:  402:
        -:  403:#endif // C++11
        -:  404:
        -:  405:#endif // _GLIBCXX_THREAD
